---
description: 
globs: 
alwaysApply: false
---
# 规则元信息
## 规则名称
typescript-rules.mdc
## 规则描述
本规则详细规定了在本项目中编写 TypeScript 代码时必须遵循的编码规范、最佳实践和风格指南。所有 TypeScript 代码都应严格遵守这些规则，以确保代码的一致性、可读性和可维护性。
## 强制执行规则
- 遵循 `tsconfig.json` 中的 `"strict": true` 配置，编写强类型、类型安全的代码。
- 代码必须通过 ESLint 检查，没有任何错误。
- **禁止使用 `any` 类型**。所有与 Webview 的通信消息都应定义明确的接口。

# Your rule content
### RULE0：项目架构概述
本项目是一个 **VS Code (Cursor) 扩展插件**，旨在提供一个高效的 Prompt 管理中心。其核心架构分为两大部分：

1.  **扩展主机 (Extension Host)**:
    *   **语言**: TypeScript (`/src` 目录)。
    *   **入口文件**: `src/extension.ts`。
    *   **激活时机**: 扩展在 VS Code 启动完成后通过 `onStartupFinished` 事件激活。
    *   **职责**:
        *   插件的后端和逻辑核心，负责注册命令、创建和管理 Webview 视图。
        *   通过 `src/dataManager.ts` 模块集中处理所有数据的持久化、读取和管理，包括全局状态 (`globalState`) 和工作区状态 (`workspaceState`)。
    *   **运行环境**: 运行在 VS Code 的主进程中。

2.  **Webview 视图 (Webview View)**:
    *   **技术栈**: 原生 HTML, CSS, JavaScript (`/src/webview` 目录)。
    *   **入口文件**: `src/webview/index.html`。
    *   **职责**: 这是插件的用户界面 (UI)。它作为一个独立的网页嵌入在 VS Code 的侧边栏中，负责展示数据和响应用户操作（如点击按钮、输入文本等）。
    *   **运行环境**: 运行在独立的沙箱环境中，不直接访问 VS Code API 或本地文件系统。

3.  **通信机制**:
    *   扩展主机和 Webview 视图之间通过一个**异步消息传递接口**进行通信。
    *   **扩展主机 -> Webview**: 通过 `webviewView.webview.postMessage()` 方法将数据或指令发送到 Webview。
    *   **Webview -> 扩展主机**: 通过 `acquireVsCodeApi().postMessage()` 方法向扩展主机发送消息，请求数据或触发后端操作。
    *   **重要**: 所有消息都应有严格的类型定义，以避免使用 `any`。建议在项目中创建一个共享的 `types.ts` 文件来定义这些消息接口 (e.g., `WebviewMessage`)。

**开发者应明确自己正在修改的部分属于哪一层，并遵守各层的职责划分。**

### RULE1：编码风格和格式
1.  **遵循 PSR-12 衍生规范**:
    *   使用4个空格进行缩进，禁止使用 Tab。
    *   类名（Classes）和接口名（Interfaces）使用 `PascalCase`。
    *   方法（methods）和变量（variables）使用 `camelCase`。
    *   常量（constants）使用 `UPPER_SNAKE_CASE`。
    *   枚举（Enums）名使用 `PascalCase`，其成员使用 `PascalCase`。
2.  **文件名**:
    *   文件名使用 `camelCase.ts` 格式，例如 `dataManager.ts`。
3.  **分号**:
    *   每条语句末尾必须加分号。
4.  **代码行长度**:
    *   每行代码的长度不应超过120个字符。

### RULE2：类型和接口
1.  **绝对禁止使用 `any` 类型**:
    *   严禁在代码中使用 `any`，包括在 `catch` 块和 Webview 消息处理中。当前 `promptHubProvider.ts` 中的部分 `any` 用法是技术债务，应逐步重构。
    *   如果类型确实未知，优先使用 `unknown`，并通过类型守卫（type guards）来缩小范围。
2.  **类型推断**:
    *   对于简单的、显而易见的类型（如 `string`, `number`, `boolean`），可以利用 TypeScript 的类型推断。
    *   对于复杂的对象或函数返回值，必须显式声明类型或接口。
3.  **为共享结构定义接口**:
    *   所有跨模块或跨层（扩展主机 <> Webview）共享的数据结构都必须定义 `interface`。
    *   建议创建一个集中的 `src/types.ts` 或 `src/interfaces.ts` 文件来存放核心数据类型，如 `Prompt`, `AppData`, 以及 Webview 通信协议的接口。
4.  **接口优于类型别名**:
    *   当定义对象结构时，优先使用 `interface`，因为它支持继承和声明合并，更具扩展性。
    *   仅在需要联合类型、交叉类型或元组时使用 `type` 别名。
    *   接口命名：使用 `I` 前缀不是强制的，但如果使用，请在整个项目中保持一致。推荐直接使用 `PascalCase`命名，如 `Prompt`。
5.  **非空断言**:
    *   谨慎使用非空断言操作符 `!`。使用它意味着你向编译器保证该值绝对不会是 `null` 或 `undefined`。滥用会导致运行时错误。请优先使用类型守卫或可选链 (`?.`)。

### RULE3：模块和导入/导出
1.  **ESM 语法**:
    *   始终使用 ES6 的 `import`/`export` 语法。项目配置为 `commonjs` 模块系统，但 TypeScript 会正确转译。
2.  **导入路径**:
    *   使用相对路径进行内部模块导入，例如 `import { DataManager } from './dataManager';`。
3.  **分组导入**:
    *   将来自同一模块的多个导入合并到一条语句中。
    *   导入顺序建议：第三方库 > `vscode` > 项目内部模块。

### RULE4：VS Code API 使用规范
1.  **API 导入**:
    *   从 `vscode` 模块中显式导入所有需要的 API 对象。
    *   示例: `import { window, commands, ExtensionContext, Uri } from 'vscode';`
2.  **命令注册与命名**:
    *   所有命令ID都应在 `package.json` 的 `contributes.commands` 部分声明。
    *   代码中通过常量引用命令ID，避免硬编码字符串。
    *   命令应遵循 `promptHub.<action>` 的命名约定，例如 `promptHub.createBackup`, `promptHub.toggleWorkspaceMode`。
3.  **资源管理 (`IDisposable`)**:
    *   所有通过 `register*` 方法（如 `commands.registerCommand`）注册的监听器、命令等，都返回一个 `IDisposable` 对象。
    *   必须将这些对象收集到 `context.subscriptions` 数组中，以便在扩展停用时由 VS Code 自动清理，防止内存泄漏。
    *   示例：`context.subscriptions.push(vscode.commands.registerCommand('promptHub.refresh', () => { ... }));`
4.  **Webview 视图管理**:
    *   在注册 Webview View Provider 时，建议设置 `retainContextWhenHidden: true` 以在视图被隐藏时保留其状态，提升用户体验。
    *   所有 Webview 中使用的本地资源（CSS, JS, 图像）都必须通过 `webview.asWebviewUri()` 方法转换成特殊 URI。
5.  **用户交互**:
    *   使用 `vscode.window.showInformationMessage` 等方法进行简单通知。
    *   对于需要用户输入或选择的场景，应使用 `vscode.window.showInputBox` 和 `vscode.window.showQuickPick`，如备份恢复功能所示。

### RULE5：错误处理
1.  **在异步操作和API调用中使用 `try...catch`**:
    *   所有可能抛出异常的操作（特别是 `async` 函数）都必须被 `try...catch` 块包围。
    *   在 `catch` 块中，捕获的错误变量类型是 `unknown`。必须先检查其类型再处理。
2.  **提供明确的错误信息**:
    *   向用户显示的错误信息应清晰、友好。避免直接暴露原始 `Error` 对象。
    *   推荐创建集中的错误处理函数，类似 `promptHubProvider.ts` 中的 `showError` 方法，以统一处理错误日志记录和用户通知。
    *   **标准错误处理模式**:
        ```typescript
        try {
          // ... some operation
        } catch (error) {
          const message = error instanceof Error ? error.message : '一个未知的错误发生了。';
          console.error('An unexpected error occurred:', error);
          vscode.window.showErrorMessage(`操作失败: ${message}`);
          
          // 如果在 Webview Provider 中，还可以将错误信息发回 Webview
          // this._postMessage({ type: 'error', requestId, message: `操作失败: ${message}` });
        }
        ```

### RULE6：代码质量和工具
1.  **ESLint**:
    *   所有代码在提交前必须通过 ESLint 检查。
    *   运行 `npm run lint` 来手动触发检查。
    *   强烈建议在IDE中安装 ESLint 插件，以便实时获得反馈。
2.  **注释**:
    *   为复杂的逻辑、算法或不直观的代码段添加清晰的注释。
    *   对于公开的函数和方法，使用 JSDoc 风格的注释来描述其功能、参数和返回值。
    *   示例:
        ```typescript
        /**
         * A brief description of what the function does.
         * @param param1 Description of the first parameter.
         * @returns Description of the return value.
         */
        function myFunction(param1: string): boolean {
          // ...
        }
        ```

### RULE7 (新增): 数据管理 (`DataManager`) 规范
1.  **单一数据源**:
    *   `DataManager` 类是整个扩展中唯一的数据源。任何模块需要访问或修改应用数据（Prompts, Categories, Settings）都**必须**通过 `DataManager` 的实例方法进行。
2.  **状态隔离**:
    *   `DataManager` 负责管理和隔离 `globalState` 和 `workspaceState` 的复杂性。其他模块不应直接访问 `context.globalState` 或 `context.workspaceState`。
3.  **使用常量键**:
    *   所有用于状态存储的键都应在 `DataManager` 中定义为静态只读属性（如 `STORAGE_KEYS`），以确保一致性和避免拼写错误。
4.  **原子操作**:
    *   `DataManager` 中的公共方法应设计为原子操作，即执行一个完整的用户功能（如 `savePrompt`, `deleteCategory`），并在内部处理所有相关的状态更新和持久化。

### RULE8 (新增): 异步编程规范 (`Async/Await`)
1.  **强制使用 `async/await`**:
    *   所有与 VS Code API、文件系统 (`fs`) 或任何返回 `Promise` 的函数交互时，都必须使用 `async/await` 语法。
2.  **避免 `.then()` 和回调地狱**:
    *   禁止在项目中使用 `.then()` 链或嵌套回调。`async/await` 提供了更清晰、更可读的代码结构。
3.  **顶层 `await`**:
    *   命令处理函数、消息处理函数等异步逻辑的入口点，必须声明为 `async`，以正确 `await` 后续的异步调用。
4.  **并行执行**:
    *   当需要并行执行多个独立的异步操作时，使用 `Promise.all()` 来提升性能，而不是顺序 `await`。
        ```typescript
        // 示例：并行获取数据
        const [prompts, categories] = await Promise.all([
            dataManager.getPrompts(),
            dataManager.getCategories()
        ]);
        ```
